services:

    arches_db:
      container_name: postgres14-3_arches
      image: postgis/postgis:14-3.2
      volumes:
          - postgres-data-arches:/var/lib/postgresql/data
          - postgres-log-arches:/var/log/postgresql
          - ./init-unix.sql:/docker-entrypoint-initdb.d/init.sql # to set up the DB template
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=postgres
        - POSTGRES_MULTIPLE_EXTENSIONS=postgis,postgis_topology
        - TZ=UTC
      command: |
          postgres
            -c max_connections=${MAX_CONNECTIONS}
            -c shared_buffers=${SHARED_BUFFERS}
            -c effective_cache_size=${EFFECTIVE_CACHE_SIZE}
            -c work_mem=${WORK_MEM}
            -c maintenance_work_mem=${MAINTENANCE_WORK_MEM}
#            -c log_statement=all
      networks:
        - arches-network
      env_file:
        - ./.env
      restart: always


    arches_elasticsearch_01:
      container_name: elasticsearch_arches_01
      image: elasticsearch:8.5.3
      volumes:
        - $SSL_CERTIFICATE_FILE:/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - $SSL_PRIVATE_KEY_FILE:/usr/share/elasticsearch/config/ssl/private-key.key
        - elasticsearch-data-arches-01:/usr/share/elasticsearch/data
      ports:
        - "${ELASTIC_PORT}:9200"
        - "127.0.0.1:9301:9300"
      environment:
        - TZ=UTC
        - node.name=arches_elasticsearch_01
        - cluster.name=kint_arches_contaniners_elasticsearch
        - cluster.initial_master_nodes=arches_elasticsearch_01,arches_elasticsearch_02
        - discovery.seed_hosts=arches_elasticsearch_02
        #- "ES_JAVA_OPTS=-Xms${ELASTIC_JVM_OPTS} -Xmx${ELASTIC_JVM_OPTS}"
        - bootstrap.memory_lock=true
        - ELASTIC_USER=$ELASTIC_USER
        - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
        - xpack.security.enabled=true
        - xpack.security.transport.ssl.enabled=true
        - xpack.security.http.ssl.enabled=true
        - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/ssl/private-key.key
        - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/ssl/private-key.key
        - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - xpack.security.transport.ssl.verification_mode=certificate
      mem_limit: $ELASTIC_MEM_LIMIT
      ulimits:
        memlock:
          soft: -1
          hard: -1
      networks:
        - arches-network
      # depends_on:
      #   - ssl_container
      restart: always


    arches_elasticsearch_02:
      container_name: elasticsearch_arches_02
      image: elasticsearch:8.5.3
      volumes:
        - $SSL_CERTIFICATE_FILE:/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - $SSL_PRIVATE_KEY_FILE:/usr/share/elasticsearch/config/ssl/private-key.key
        - elasticsearch-data-arches-02:/usr/share/elasticsearch/data
      environment:
        - TZ=UTC
        - node.name=arches_elasticsearch_02
        - cluster.name=kint_arches_contaniners_elasticsearch
        - cluster.initial_master_nodes=arches_elasticsearch_01,arches_elasticsearch_02
        - discovery.seed_hosts=arches_elasticsearch_01
        #- "ES_JAVA_OPTS=-Xms${ELASTIC_JVM_OPTS} -Xmx${ELASTIC_JVM_OPTS}"
        - bootstrap.memory_lock=true
        - ELASTIC_USER=$ELASTIC_USER
        - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
        - xpack.security.enabled=true
        - xpack.security.transport.ssl.enabled=true
        - xpack.security.http.ssl.enabled=true
        - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/ssl/private-key.key
        - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/ssl/private-key.key
        - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/ssl/certificate-file.crt
        - xpack.security.transport.ssl.verification_mode=certificate
      mem_limit: $ELASTIC_MEM_LIMIT
      ulimits:
        memlock:
          soft: -1
          hard: -1
      networks:
        - arches-network
      restart: always


    arches_redis:
      container_name: redis_arches
      image: "redis:latest"
      ports:
        - "${REDIS_PORT}:6379"
      volumes:
        - redis-data-arches:/data
      command: >
        --requirepass ${REDIS_PASSWORD}
        --loglevel debug
      networks:
        - arches-network
      restart: always


    arches_geoserver:
      container_name: geoserver_arches
      image: docker.osgeo.org/geoserver:2.27.0
      volumes:
        - $SSL_CERTIFICATE_FILE:/etc/ssl/certificate-file.crt
        - $SSL_PRIVATE_KEY_FILE:/etc/ssl/private-key.key
        - geoserver-data-arches:/opt/geoserver_data
      ports:
        - 127.0.0.1:8080:8080
        - 127.0.0.1:8443:8443
      environment:
        - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
        - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
        - CORS_ENABLED=true
        - COMMUNITY_EXTENSIONS=cog-plugin,s3-geotiff-plugin
        - SKIP_DEMO_DATA=true
        - SSL=true
        - SSL_CERT_FILE=/etc/ssl/certificate-file.crt
        - SSL_KEY_FILE=/etc/ssl/private-key.key
        # - SSL_CA_FILE=/etc/certs/root.crt
        - HTTPS_PROXY_NAME=$DOMAIN_NAME
        - HTTPS_PROXY_PORT=127.0.0.1:8443
        - HTTPS_SCHEME=https
      env_file:
        - ./.env
      networks:
        - arches-network
      restart: always


#  varnish:
#    image: eeacms/varnish
#    # ports:
#    #   - '6081:6081'
#    #   - '80:80'
#    environment:
#      BACKENDS: 'tileserv:7800'
#      DNS_ENABLED: 'false'
#      COOKIES: 'true'
#      PARAM_VALUE: '-p default_ttl=600'
#    # networks:
#    #   - webapp
#    network_mode: host
#    depends_on:
#      - tileserv
#    restart: always


    pg_tileserv:
      container_name: pg_tileserv_arches
      image: pramsey/pg_tileserv:latest
      volumes:
        - $SSL_CERTIFICATE_FILE:/etc/ssl/certificate-file.crt
        - $SSL_PRIVATE_KEY_FILE:/etc/ssl/private-key.key
      environment:
        - DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@arches_db:5432/arches_her
        # - TS_HTTPHOST=localhost # this line seems to break access
        - TS_HTTPPORT=7800
        - TS_HTTPSPORT=7801
        - TS_BASEPATH=/pgtileserv
        - TS_TLSSERVERCERTIFICATEFILE=/etc/ssl/certificate-file.crt
        - TS_TLSSERVERPRIVATEKEYFILE=/etc/ssl/private-key.key
      env_file:
        - ./.env
      ports:
        - 127.0.0.1:7800:7800
        - 127.0.0.1:7801:7801
      depends_on:
        - arches_db
      networks:
        - arches-network
      restart: always


    pg_featureserv:
      container_name: pg_featureserv_arches
      image: pramsey/pg_featureserv
      volumes:
        - $SSL_CERTIFICATE_FILE:/etc/ssl/certificate-file.crt
        - $SSL_PRIVATE_KEY_FILE:/etc/ssl/private-key.key
      environment:
        - DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@arches_db:5432/arches_her
        - PGFS_HTTPHOST=localhost
        - PGFS_SERVER_HTTPPORT=9001  # HTTP port
        - PGFS_SERVER_HTTPSPORT=9002 # HTTPS port
        - PGFS_SERVER_BASEPATH=/pgfeatureserv
        - PGFS_SERVER_TLSSERVERCERTIFICATEFILE=/etc/ssl/certificate-file.crt
        - PGFS_SERVER_TLSSERVERPRIVATEKEYFILE=/etc/ssl/private-key.key
      env_file:
        - ./.env
      ports:
        - 127.0.0.1:9001:9001
        - 127.0.0.1:9002:9002
      depends_on:
        - arches_db
      networks:
        - arches-network
      restart: always


  # Commented out to favour use of Redis cache + message broker 
    # arches_memcached:
    #   container_name: memcached1-6_arches
    #   image: memcached:1.6.22
    #   ports:
    #     - "127.0.0.1:11211:11211"
    #   networks:
    #     - arches-network
    #   restart: always


networks:
  arches-network:
    name: arches-network
    driver: bridge

volumes:
    postgres-data-arches:
    postgres-log-arches:
    elasticsearch-data-arches-01:
    elasticsearch-data-arches-02:
    rabbitmq-logs-arches:
    rabbitmq-data-arches:
    geoserver-data-arches:
    redis-data-arches:
